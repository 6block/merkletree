var searchIndex = {};
searchIndex["merkle_light"] = {"doc":"light Merkle Tree implementation.","items":[[0,"hash","merkle_light","Hash infrastructure for items in Merkle tree. Hash infrastructure for items in Merkle Tree.",null,null],[8,"Hashable","merkle_light::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",0,null],[8,"Algorithm","","A trait for hashing an arbitrary stream of bytes for calculating merkle tree nodes.",null,null],[10,"hash","","Returns the hash value for the data stream written so far.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"reset","","Reset Hasher state.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"leaf","","Returns the hash value for MT leaf (prefix 0x00).",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"node","","Returns the hash value for MT interior node (prefix 0x01).",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"proof","merkle_light","Merkle tree inclusion proof",null,null],[3,"Proof","merkle_light::proof","Merkle tree inclusion proof for data element, for which item = Leaf(Hash(Data Item)).",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"proof"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"proof"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"proof"}],"output":{"name":"bool"}}],[11,"new","","Creates new MT inclusion proof",2,{"inputs":[{"name":"vec"},{"generics":["bool"],"name":"vec"}],"output":{"name":"proof"}}],[11,"item","","Return proof target leaf",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"root","","Return tree root",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"validate","","Verifies MT inclusion proof",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"merkle","merkle_light","Merkle tree abstractions, implementation and algorithms.",null,null],[3,"MerkleTree","merkle_light::merkle","Merkle Tree.",null,null],[5,"next_pow2","","`next_pow2` returns next highest power of two from a given number if it is not already a power of two.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"log2_pow2","","find power of 2 of a number which is power of 2",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"merkletree"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"merkletree"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"merkletree"}],"output":{"name":"bool"}}],[11,"new","","Creates new merkle from a sequence of hashes.",3,{"inputs":[{"name":"i"}],"output":{"name":"merkletree"}}],[11,"from_hash","","Creates new merkle from a sequence of hashes.",3,{"inputs":[{"name":"i"}],"output":{"name":"merkletree"}}],[11,"from_data","","Creates new merkle tree from a list of hashable objects.",3,{"inputs":[{"name":"i"}],"output":{"name":"merkletree"}}],[11,"gen_proof","","Generate merkle tree inclusion proof for leaf `i`",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"proof"}}],[11,"root","","Returns merkle root",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"len","","Returns number of elements in the tree.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"height","","Returns height of the tree",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"leafs","","Returns original number of elements the tree was built upon.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","Extracts a slice containing the entire vector.",3,null],[11,"from_iter","","Creates new merkle tree from an iterator over hashable objects.",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",3,null]],"paths":[[8,"Hashable"],[8,"Algorithm"],[3,"Proof"],[3,"MerkleTree"]]};
searchIndex["merkle_light_derive"] = {"doc":"","items":[[5,"derive_hashable","merkle_light_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
initSearch(searchIndex);
